-- ComplexNumber.lua
local ComplexNumber = {}
ComplexNumber.__index = ComplexNumber

function ComplexNumber.new(real, imaginary)
	return setmetatable({real = real or 0, imaginary = imaginary or 0}, ComplexNumber)
end

function ComplexNumber:add(other)
	if type(other) == "number" then
		-- scalar
		return ComplexNumber.new(self.real + other, self.imaginary + other)
	else
		return ComplexNumber.new(self.real + other.real, self.imaginary + other.imaginary)
	end
end

function ComplexNumber:mul(other)
	if type(other) == "number" then
		-- Scalar multiplication
		return ComplexNumber.new(self.real * other, self.imaginary * other)
	elseif getmetatable(other) == ComplexNumber then
		return ComplexNumber.new(
			self.real * other.real - self.imaginary * other.imaginary,
			self.real * other.imaginary + self.imaginary * other.real
		)
	else
		error("Attempted to multiply with an incompatible type")
	end
end

function ComplexNumber:abs()
	return math.sqrt(self.real^2 + self.imaginary^2)
end

setmetatable(ComplexNumber, {__call = ComplexNumber.new})

-- Utility Functions
local function sigmoid(z)
	-- Using the magnitude for the sigmoid function
	local x;
	if type(z) == "number" then
		x = z
	else
		x = z:abs()
	end
	local result = 1 / (1 + math.exp(-x))
	return result  -- Return as a complex number with imaginary part 0
end

local function dSigmoid(z)
	-- Using the magnitude of z for the sigmoid function, then calculating the derivative
	local y = sigmoid(z)  -- This is now a ComplexNumber
	local derivative = y * (1 - y)
	return derivative  -- Return as a complex number with imaginary part 0
end

-- Initialize Quantum-Inspired Weights
local function initializeQuantumInspiredWeights(neuronsA, neuronsB)
	local weights = {}
	for i = 1, neuronsA do
		weights[i] = {}
		for j = 1, neuronsB do
			local phase = math.random() * 2 * math.pi
			weights[i][j] = ComplexNumber.new(math.cos(phase), math.sin(phase))
		end
	end
	return weights
end

-- Initialize Biases
local function initializeBiases(neurons)
	local biases = {}
	for i = 1, neurons do
		biases[i] = ComplexNumber.new(math.random() * 2 - 1, math.random() * 2 - 1)  -- Complex biases
	end
	return biases
end

-- QuantumNeuralNetwork.lua
local QuantumNeuralNetwork = {}
QuantumNeuralNetwork.__index = QuantumNeuralNetwork

function QuantumNeuralNetwork.new(inputNeurons, hiddenNeurons, outputNeurons)
	local self = setmetatable({}, QuantumNeuralNetwork)
	self.weightsInputHidden = initializeQuantumInspiredWeights(inputNeurons, hiddenNeurons)
	self.weightsHiddenOutput = initializeQuantumInspiredWeights(hiddenNeurons, outputNeurons)
	self.biasHidden = initializeBiases(hiddenNeurons)
	self.biasOutput = initializeBiases(outputNeurons)
	self.learningRate = 0.01
	return self
end

function QuantumNeuralNetwork:forwardPass(inputs, weights, biases, activationFunc)
	local outputs = {}
	for i = 1, #biases do
		local sum = biases[i]  -- Biases are now ComplexNumbers
		for j = 1, #inputs do
			sum = sum:add(weights[j][i]:mul(inputs[j]))
		end
		outputs[i] = activationFunc(sum)  -- Activation function directly on ComplexNumber
	end
	return outputs
end

function QuantumNeuralNetwork:predict(inputs)
	local hiddenActivations = self:forwardPass(inputs, self.weightsInputHidden, self.biasHidden, sigmoid)
	return self:forwardPass(hiddenActivations, self.weightsHiddenOutput, self.biasOutput, sigmoid)
end

-- Quantum-inspired annealing function adapted for complex numbers
function QuantumNeuralNetwork:quantumInspiredAnnealing(startInput, iterations, temp, coolingRate)
	-- Quantum-inspired tweak function for complex numbers
	local function quantumTweak(input, tweakMagnitude)
		local tweakedInput = {}
		for i = 1, #input do
			-- Tweak both real and imaginary parts
			local realTunneling = math.exp(-tweakMagnitude / temp) * (math.random() - 0.5)
			local imaginaryTunneling = math.exp(-tweakMagnitude / temp) * (math.random() - 0.5)
			tweakedInput[i] = input[i]:add(ComplexNumber.new(realTunneling, imaginaryTunneling))
		end
		return tweakedInput
	end

	local currentInput = startInput
	local currentScore = self:predict(currentInput)[1]:abs()
	local bestInput = currentInput
	local bestScore = currentScore

	for i = 1, iterations do
		local tweakMagnitude = temp / 10
		local newInput = quantumTweak(currentInput, tweakMagnitude)
		local newScore = self:predict(newInput)[1]:abs()

		local delta = newScore - currentScore

		if delta > 0 or math.random() < math.exp(-delta / temp) then
			currentInput = newInput
			currentScore = newScore

			if newScore > bestScore then
				bestInput = newInput
				bestScore = newScore
			end
		end

		temp = temp * coolingRate
	end

	return bestInput
end

function QuantumNeuralNetwork:backwardPass(inputs, hiddenActivations, predictedOutputs, errors)
	-- Gradients for weights from hidden to output
	local dWeightsHiddenOutput = {}
	for j = 1, #self.weightsHiddenOutput do
		dWeightsHiddenOutput[j] = {}
		for k = 1, #predictedOutputs do
			dWeightsHiddenOutput[j][k] = ComplexNumber.new(errors[k] * dSigmoid(predictedOutputs[k]) * hiddenActivations[j])
			-- Update weights with gradients
			self.weightsHiddenOutput[j][k] = self.weightsHiddenOutput[j][k]:add(dWeightsHiddenOutput[j][k]:mul(self.learningRate))
		end
	end

	-- Update biases for output layer
	for k = 1, #self.biasOutput do
		self.biasOutput[k] = self.biasOutput[k]:add(self.learningRate * errors[k] * dSigmoid(predictedOutputs[k]))
	end

	-- Error propagation back to the hidden layer
	local hiddenErrors = {}
	for j = 1, #hiddenActivations do
		hiddenErrors[j] = 0
		for k = 1, #predictedOutputs do
			hiddenErrors[j] = hiddenErrors[j] + errors[k] * self.weightsHiddenOutput[j][k].real
		end
	end

	-- Gradients for weights from input to hidden
	local dWeightsInputHidden = {}
	for i = 1, #self.weightsInputHidden do
		dWeightsInputHidden[i] = {}
		for j = 1, #hiddenActivations do
			dWeightsInputHidden[i][j] = ComplexNumber.new( hiddenErrors[j] * dSigmoid( hiddenActivations[j]) * inputs[i].real )
			-- Update weights with gradients
			self.weightsInputHidden[i][j] = self.weightsInputHidden[i][j]:add(dWeightsInputHidden[i][j]:mul(self.learningRate))
		end
	end

	-- Update biases for hidden layer
	for j = 1, #self.biasHidden do
		self.biasHidden[j] = self.biasHidden[j]:add( self.learningRate * hiddenErrors[j] * dSigmoid(hiddenActivations[j]) )
	end
end

function QuantumNeuralNetwork:quantumInspiredPredict(inputs)
	local outputActivations = self:predict(inputs)  -- Classical prediction
	local actionProbabilities = {}

	-- Convert activations to probabilities
	for i, activation in ipairs(outputActivations) do
		actionProbabilities[i] = activation * activation  -- Squared magnitude for probability
	end

	-- Determine the action with the highest probability
	local maxProbability, actionIndex = -1, 0
	for i, probability in ipairs(actionProbabilities) do
		if probability > maxProbability then
			maxProbability = probability
			actionIndex = i
		end
	end

	return actionIndex  -- Return the index of the chosen action
end

function QuantumNeuralNetwork:train(trainingData, epochs)
	for epoch = 1, epochs do
		local totalError = 0
		for _, dataPoint in ipairs(trainingData) do
			local inputs = {}  -- Convert dataPoint inputs to ComplexNumber instances
			for i, value in ipairs(dataPoint.inputs) do
				table.insert(inputs, ComplexNumber.new(value, 0))
			end

			local targetOutputs = dataPoint.output  -- Assume these are already complex or converted as needed

			-- Forward pass
			local hiddenActivations = self:forwardPass(inputs, self.weightsInputHidden, self.biasHidden, sigmoid)
			local predictedOutputs = self:forwardPass(hiddenActivations, self.weightsHiddenOutput, self.biasOutput, sigmoid)

			-- Calculate error (simplified as difference in magnitudes)
			local errors = {}
			for i = 1, #predictedOutputs do
				errors[i] = targetOutputs[i] - predictedOutputs[i]  -- Assuming targetOutputs are real numbers
				totalError = totalError + errors[i]^2
			end

			-- Backward pass (update weights and biases based on errors)
			self:backwardPass(inputs, hiddenActivations, predictedOutputs, errors)
		end
		print("Epoch:", epoch, "Total Error:", totalError)
	end
end

return {QuantumNeuralNetwork=QuantumNeuralNetwork}
